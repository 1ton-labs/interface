/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IEssenceNFTInterface extends utils.Interface {
  functions: {
    "initialize(uint256,uint256,string,string,bool)": FunctionFragment;
    "isTransferable()": FunctionFragment;
    "mint(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "initialize" | "isTransferable" | "mint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;

  events: {
    "Initialize(uint256,uint256,string,string,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
}

export interface InitializeEventObject {
  profileId: BigNumber;
  essenceId: BigNumber;
  name: string;
  symbol: string;
  transferable: boolean;
}
export type InitializeEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, boolean],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface IEssenceNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEssenceNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      transferable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTransferable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  initialize(
    profileId: PromiseOrValue<BigNumberish>,
    essenceId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    transferable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTransferable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initialize(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      transferable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    isTransferable(overrides?: CallOverrides): Promise<boolean>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Initialize(uint256,uint256,string,string,bool)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      essenceId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      symbol?: null,
      transferable?: null
    ): InitializeEventFilter;
    Initialize(
      profileId?: PromiseOrValue<BigNumberish> | null,
      essenceId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      symbol?: null,
      transferable?: null
    ): InitializeEventFilter;
  };

  estimateGas: {
    initialize(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      transferable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTransferable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      transferable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTransferable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
