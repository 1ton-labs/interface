/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ITreasuryInterface extends utils.Interface {
  functions: {
    "allowCurrency(address,bool)": FunctionFragment;
    "getTreasuryAddress()": FunctionFragment;
    "getTreasuryFee()": FunctionFragment;
    "isCurrencyAllowed(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowCurrency"
      | "getTreasuryAddress"
      | "getTreasuryFee"
      | "isCurrencyAllowed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowCurrency",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCurrencyAllowed",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCurrencyAllowed",
    data: BytesLike
  ): Result;

  events: {
    "AllowCurrency(address,bool,bool)": EventFragment;
    "SetTreasuryAddress(address,address)": EventFragment;
    "SetTreasuryFee(uint16,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowCurrency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasuryAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasuryFee"): EventFragment;
}

export interface AllowCurrencyEventObject {
  currency: string;
  preAllowed: boolean;
  newAllowed: boolean;
}
export type AllowCurrencyEvent = TypedEvent<
  [string, boolean, boolean],
  AllowCurrencyEventObject
>;

export type AllowCurrencyEventFilter = TypedEventFilter<AllowCurrencyEvent>;

export interface SetTreasuryAddressEventObject {
  preTreasuryAddress: string;
  treasuryAddress: string;
}
export type SetTreasuryAddressEvent = TypedEvent<
  [string, string],
  SetTreasuryAddressEventObject
>;

export type SetTreasuryAddressEventFilter =
  TypedEventFilter<SetTreasuryAddressEvent>;

export interface SetTreasuryFeeEventObject {
  preTreasuryFee: number;
  treasuryFee: number;
}
export type SetTreasuryFeeEvent = TypedEvent<
  [number, number],
  SetTreasuryFeeEventObject
>;

export type SetTreasuryFeeEventFilter = TypedEventFilter<SetTreasuryFeeEvent>;

export interface ITreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowCurrency(
      currency: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    getTreasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    isCurrencyAllowed(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  allowCurrency(
    currency: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTreasuryAddress(overrides?: CallOverrides): Promise<string>;

  getTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  isCurrencyAllowed(
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    allowCurrency(
      currency: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<string>;

    getTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    isCurrencyAllowed(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AllowCurrency(address,bool,bool)"(
      currency?: PromiseOrValue<string> | null,
      preAllowed?: PromiseOrValue<boolean> | null,
      newAllowed?: PromiseOrValue<boolean> | null
    ): AllowCurrencyEventFilter;
    AllowCurrency(
      currency?: PromiseOrValue<string> | null,
      preAllowed?: PromiseOrValue<boolean> | null,
      newAllowed?: PromiseOrValue<boolean> | null
    ): AllowCurrencyEventFilter;

    "SetTreasuryAddress(address,address)"(
      preTreasuryAddress?: PromiseOrValue<string> | null,
      treasuryAddress?: PromiseOrValue<string> | null
    ): SetTreasuryAddressEventFilter;
    SetTreasuryAddress(
      preTreasuryAddress?: PromiseOrValue<string> | null,
      treasuryAddress?: PromiseOrValue<string> | null
    ): SetTreasuryAddressEventFilter;

    "SetTreasuryFee(uint16,uint16)"(
      preTreasuryFee?: PromiseOrValue<BigNumberish> | null,
      treasuryFee?: PromiseOrValue<BigNumberish> | null
    ): SetTreasuryFeeEventFilter;
    SetTreasuryFee(
      preTreasuryFee?: PromiseOrValue<BigNumberish> | null,
      treasuryFee?: PromiseOrValue<BigNumberish> | null
    ): SetTreasuryFeeEventFilter;
  };

  estimateGas: {
    allowCurrency(
      currency: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    isCurrencyAllowed(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowCurrency(
      currency: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTreasuryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCurrencyAllowed(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
