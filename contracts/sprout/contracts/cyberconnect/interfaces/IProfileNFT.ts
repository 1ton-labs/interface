/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace DataTypes {
  export type CollectParamsStruct = {
    collector: PromiseOrValue<string>;
    profileId: PromiseOrValue<BigNumberish>;
    essenceId: PromiseOrValue<BigNumberish>;
  };

  export type CollectParamsStructOutput = [string, BigNumber, BigNumber] & {
    collector: string;
    profileId: BigNumber;
    essenceId: BigNumber;
  };

  export type EIP712SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type EIP712SignatureStructOutput = [
    number,
    string,
    string,
    BigNumber
  ] & { v: number; r: string; s: string; deadline: BigNumber };

  export type CreateProfileParamsStruct = {
    to: PromiseOrValue<string>;
    handle: PromiseOrValue<string>;
    avatar: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
    operator: PromiseOrValue<string>;
  };

  export type CreateProfileParamsStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    to: string;
    handle: string;
    avatar: string;
    metadata: string;
    operator: string;
  };

  export type RegisterEssenceParamsStruct = {
    profileId: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    essenceTokenURI: PromiseOrValue<string>;
    essenceMw: PromiseOrValue<string>;
    transferable: PromiseOrValue<boolean>;
    deployAtRegister: PromiseOrValue<boolean>;
  };

  export type RegisterEssenceParamsStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    boolean,
    boolean
  ] & {
    profileId: BigNumber;
    name: string;
    symbol: string;
    essenceTokenURI: string;
    essenceMw: string;
    transferable: boolean;
    deployAtRegister: boolean;
  };

  export type SubscribeParamsStruct = {
    profileIds: PromiseOrValue<BigNumberish>[];
  };

  export type SubscribeParamsStructOutput = [BigNumber[]] & {
    profileIds: BigNumber[];
  };
}

export interface IProfileNFTInterface extends utils.Interface {
  functions: {
    "collect((address,uint256,uint256),bytes,bytes)": FunctionFragment;
    "collectWithSig((address,uint256,uint256),bytes,bytes,address,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "createProfile((address,string,string,string,address),bytes,bytes)": FunctionFragment;
    "getAvatar(uint256)": FunctionFragment;
    "getEssenceMw(uint256,uint256)": FunctionFragment;
    "getEssenceNFT(uint256,uint256)": FunctionFragment;
    "getEssenceNFTTokenURI(uint256,uint256)": FunctionFragment;
    "getHandleByProfileId(uint256)": FunctionFragment;
    "getMetadata(uint256)": FunctionFragment;
    "getNFTDescriptor()": FunctionFragment;
    "getNamespaceOwner()": FunctionFragment;
    "getOperatorApproval(uint256,address)": FunctionFragment;
    "getPrimaryProfile(address)": FunctionFragment;
    "getProfileIdByHandle(string)": FunctionFragment;
    "getSubscribeMw(uint256)": FunctionFragment;
    "getSubscribeNFT(uint256)": FunctionFragment;
    "getSubscribeNFTTokenURI(uint256)": FunctionFragment;
    "initialize(address,string,string)": FunctionFragment;
    "pause(bool)": FunctionFragment;
    "registerEssence((uint256,string,string,string,address,bool,bool),bytes)": FunctionFragment;
    "registerEssenceWithSig((uint256,string,string,string,address,bool,bool),bytes,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "setAvatar(uint256,string)": FunctionFragment;
    "setAvatarWithSig(uint256,string,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "setEssenceData(uint256,uint256,string,address,bytes)": FunctionFragment;
    "setEssenceDataWithSig(uint256,uint256,string,address,bytes,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "setMetadata(uint256,string)": FunctionFragment;
    "setMetadataWithSig(uint256,string,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "setNFTDescriptor(address)": FunctionFragment;
    "setNamespaceOwner(address)": FunctionFragment;
    "setOperatorApproval(uint256,address,bool)": FunctionFragment;
    "setPrimaryProfile(uint256)": FunctionFragment;
    "setPrimaryProfileWithSig(uint256,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "setSubscribeData(uint256,string,address,bytes)": FunctionFragment;
    "setSubscribeDataWithSig(uint256,string,address,bytes,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "subscribe((uint256[]),bytes[],bytes[])": FunctionFragment;
    "subscribeWithSig((uint256[]),bytes[],bytes[],address,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collect"
      | "collectWithSig"
      | "createProfile"
      | "getAvatar"
      | "getEssenceMw"
      | "getEssenceNFT"
      | "getEssenceNFTTokenURI"
      | "getHandleByProfileId"
      | "getMetadata"
      | "getNFTDescriptor"
      | "getNamespaceOwner"
      | "getOperatorApproval"
      | "getPrimaryProfile"
      | "getProfileIdByHandle"
      | "getSubscribeMw"
      | "getSubscribeNFT"
      | "getSubscribeNFTTokenURI"
      | "initialize"
      | "pause"
      | "registerEssence"
      | "registerEssenceWithSig"
      | "setAvatar"
      | "setAvatarWithSig"
      | "setEssenceData"
      | "setEssenceDataWithSig"
      | "setMetadata"
      | "setMetadataWithSig"
      | "setNFTDescriptor"
      | "setNamespaceOwner"
      | "setOperatorApproval"
      | "setPrimaryProfile"
      | "setPrimaryProfileWithSig"
      | "setSubscribeData"
      | "setSubscribeDataWithSig"
      | "subscribe"
      | "subscribeWithSig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collect",
    values: [
      DataTypes.CollectParamsStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectWithSig",
    values: [
      DataTypes.CollectParamsStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [
      DataTypes.CreateProfileParamsStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvatar",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEssenceMw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEssenceNFT",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEssenceNFTTokenURI",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandleByProfileId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTDescriptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNamespaceOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorApproval",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimaryProfile",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileIdByHandle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscribeMw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscribeNFT",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscribeNFTTokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEssence",
    values: [DataTypes.RegisterEssenceParamsStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEssenceWithSig",
    values: [
      DataTypes.RegisterEssenceParamsStruct,
      PromiseOrValue<BytesLike>,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatar",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatarWithSig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEssenceData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEssenceDataWithSig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataWithSig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTDescriptor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNamespaceOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorApproval",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryProfile",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryProfileWithSig",
    values: [PromiseOrValue<BigNumberish>, DataTypes.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscribeData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscribeDataWithSig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [
      DataTypes.SubscribeParamsStruct,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeWithSig",
    values: [
      DataTypes.SubscribeParamsStruct,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
      DataTypes.EIP712SignatureStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEssenceMw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEssenceNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEssenceNFTTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHandleByProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNamespaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrimaryProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileIdByHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscribeMw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscribeNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscribeNFTTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerEssence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEssenceWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAvatarWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEssenceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEssenceDataWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNamespaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryProfileWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscribeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscribeDataWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribeWithSig",
    data: BytesLike
  ): Result;

  events: {
    "CollectEssence(address,uint256,uint256,uint256,bytes,bytes)": EventFragment;
    "CreateProfile(address,uint256,string,string,string)": EventFragment;
    "DeployEssenceNFT(uint256,uint256,address)": EventFragment;
    "DeploySubscribeNFT(uint256,address)": EventFragment;
    "Initialize(address,string,string)": EventFragment;
    "RegisterEssence(uint256,uint256,string,string,string,address,bytes)": EventFragment;
    "SetAvatar(uint256,string)": EventFragment;
    "SetEssenceData(uint256,uint256,string,address,bytes)": EventFragment;
    "SetMetadata(uint256,string)": EventFragment;
    "SetNFTDescriptor(address)": EventFragment;
    "SetNamespaceOwner(address,address)": EventFragment;
    "SetOperatorApproval(uint256,address,bool,bool)": EventFragment;
    "SetPrimaryProfile(address,uint256)": EventFragment;
    "SetSubscribeData(uint256,string,address,bytes)": EventFragment;
    "Subscribe(address,uint256[],bytes[],bytes[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectEssence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployEssenceNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploySubscribeNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterEssence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAvatar"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEssenceData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNFTDescriptor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNamespaceOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOperatorApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPrimaryProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSubscribeData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribe"): EventFragment;
}

export interface CollectEssenceEventObject {
  collector: string;
  profileId: BigNumber;
  essenceId: BigNumber;
  tokenId: BigNumber;
  preData: string;
  postData: string;
}
export type CollectEssenceEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, string],
  CollectEssenceEventObject
>;

export type CollectEssenceEventFilter = TypedEventFilter<CollectEssenceEvent>;

export interface CreateProfileEventObject {
  to: string;
  profileId: BigNumber;
  handle: string;
  avatar: string;
  metadata: string;
}
export type CreateProfileEvent = TypedEvent<
  [string, BigNumber, string, string, string],
  CreateProfileEventObject
>;

export type CreateProfileEventFilter = TypedEventFilter<CreateProfileEvent>;

export interface DeployEssenceNFTEventObject {
  profileId: BigNumber;
  essenceId: BigNumber;
  essenceNFT: string;
}
export type DeployEssenceNFTEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  DeployEssenceNFTEventObject
>;

export type DeployEssenceNFTEventFilter =
  TypedEventFilter<DeployEssenceNFTEvent>;

export interface DeploySubscribeNFTEventObject {
  profileId: BigNumber;
  subscribeNFT: string;
}
export type DeploySubscribeNFTEvent = TypedEvent<
  [BigNumber, string],
  DeploySubscribeNFTEventObject
>;

export type DeploySubscribeNFTEventFilter =
  TypedEventFilter<DeploySubscribeNFTEvent>;

export interface InitializeEventObject {
  owner: string;
  name: string;
  symbol: string;
}
export type InitializeEvent = TypedEvent<
  [string, string, string],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface RegisterEssenceEventObject {
  profileId: BigNumber;
  essenceId: BigNumber;
  name: string;
  symbol: string;
  essenceTokenURI: string;
  essenceMw: string;
  prepareReturnData: string;
}
export type RegisterEssenceEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string, string, string],
  RegisterEssenceEventObject
>;

export type RegisterEssenceEventFilter = TypedEventFilter<RegisterEssenceEvent>;

export interface SetAvatarEventObject {
  profileId: BigNumber;
  newAvatar: string;
}
export type SetAvatarEvent = TypedEvent<
  [BigNumber, string],
  SetAvatarEventObject
>;

export type SetAvatarEventFilter = TypedEventFilter<SetAvatarEvent>;

export interface SetEssenceDataEventObject {
  profileId: BigNumber;
  essenceId: BigNumber;
  tokenURI: string;
  mw: string;
  prepareReturnData: string;
}
export type SetEssenceDataEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string],
  SetEssenceDataEventObject
>;

export type SetEssenceDataEventFilter = TypedEventFilter<SetEssenceDataEvent>;

export interface SetMetadataEventObject {
  profileId: BigNumber;
  newMetadata: string;
}
export type SetMetadataEvent = TypedEvent<
  [BigNumber, string],
  SetMetadataEventObject
>;

export type SetMetadataEventFilter = TypedEventFilter<SetMetadataEvent>;

export interface SetNFTDescriptorEventObject {
  newDescriptor: string;
}
export type SetNFTDescriptorEvent = TypedEvent<
  [string],
  SetNFTDescriptorEventObject
>;

export type SetNFTDescriptorEventFilter =
  TypedEventFilter<SetNFTDescriptorEvent>;

export interface SetNamespaceOwnerEventObject {
  preOwner: string;
  newOwner: string;
}
export type SetNamespaceOwnerEvent = TypedEvent<
  [string, string],
  SetNamespaceOwnerEventObject
>;

export type SetNamespaceOwnerEventFilter =
  TypedEventFilter<SetNamespaceOwnerEvent>;

export interface SetOperatorApprovalEventObject {
  profileId: BigNumber;
  operator: string;
  prevApproved: boolean;
  approved: boolean;
}
export type SetOperatorApprovalEvent = TypedEvent<
  [BigNumber, string, boolean, boolean],
  SetOperatorApprovalEventObject
>;

export type SetOperatorApprovalEventFilter =
  TypedEventFilter<SetOperatorApprovalEvent>;

export interface SetPrimaryProfileEventObject {
  user: string;
  profileId: BigNumber;
}
export type SetPrimaryProfileEvent = TypedEvent<
  [string, BigNumber],
  SetPrimaryProfileEventObject
>;

export type SetPrimaryProfileEventFilter =
  TypedEventFilter<SetPrimaryProfileEvent>;

export interface SetSubscribeDataEventObject {
  profileId: BigNumber;
  tokenURI: string;
  mw: string;
  prepareReturnData: string;
}
export type SetSubscribeDataEvent = TypedEvent<
  [BigNumber, string, string, string],
  SetSubscribeDataEventObject
>;

export type SetSubscribeDataEventFilter =
  TypedEventFilter<SetSubscribeDataEvent>;

export interface SubscribeEventObject {
  sender: string;
  profileIds: BigNumber[];
  preDatas: string[];
  postDatas: string[];
}
export type SubscribeEvent = TypedEvent<
  [string, BigNumber[], string[], string[]],
  SubscribeEventObject
>;

export type SubscribeEventFilter = TypedEventFilter<SubscribeEvent>;

export interface IProfileNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProfileNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collect(
      params: DataTypes.CollectParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectWithSig(
      params: DataTypes.CollectParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createProfile(
      params: DataTypes.CreateProfileParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAvatar(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEssenceMw(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEssenceNFT(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEssenceNFTTokenURI(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHandleByProfileId(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMetadata(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNFTDescriptor(overrides?: CallOverrides): Promise<[string]>;

    getNamespaceOwner(overrides?: CallOverrides): Promise<[string]>;

    getOperatorApproval(
      profileId: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPrimaryProfile(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { profileId: BigNumber }>;

    getProfileIdByHandle(
      handle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubscribeMw(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSubscribeNFT(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSubscribeNFTTokenURI(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _owner: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      toPause: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerEssence(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerEssenceWithSig(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAvatar(
      profileId: PromiseOrValue<BigNumberish>,
      avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAvatarWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      avatar: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEssenceData(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEssenceDataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetadata(
      profileId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetadataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNFTDescriptor(
      descriptor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNamespaceOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperatorApproval(
      profileId: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrimaryProfile(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrimaryProfileWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSubscribeData(
      profileId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSubscribeDataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: PromiseOrValue<BytesLike>[],
      postDatas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeWithSig(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: PromiseOrValue<BytesLike>[],
      postDatas: PromiseOrValue<BytesLike>[],
      sender: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  collect(
    params: DataTypes.CollectParamsStruct,
    preData: PromiseOrValue<BytesLike>,
    postData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectWithSig(
    params: DataTypes.CollectParamsStruct,
    preData: PromiseOrValue<BytesLike>,
    postData: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createProfile(
    params: DataTypes.CreateProfileParamsStruct,
    preData: PromiseOrValue<BytesLike>,
    postData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAvatar(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getEssenceMw(
    profileId: PromiseOrValue<BigNumberish>,
    essenceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getEssenceNFT(
    profileId: PromiseOrValue<BigNumberish>,
    essenceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getEssenceNFTTokenURI(
    profileId: PromiseOrValue<BigNumberish>,
    essenceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getHandleByProfileId(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMetadata(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNFTDescriptor(overrides?: CallOverrides): Promise<string>;

  getNamespaceOwner(overrides?: CallOverrides): Promise<string>;

  getOperatorApproval(
    profileId: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPrimaryProfile(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProfileIdByHandle(
    handle: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubscribeMw(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubscribeNFT(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubscribeNFTTokenURI(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _owner: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    toPause: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerEssence(
    params: DataTypes.RegisterEssenceParamsStruct,
    initData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerEssenceWithSig(
    params: DataTypes.RegisterEssenceParamsStruct,
    initData: PromiseOrValue<BytesLike>,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAvatar(
    profileId: PromiseOrValue<BigNumberish>,
    avatar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAvatarWithSig(
    profileId: PromiseOrValue<BigNumberish>,
    avatar: PromiseOrValue<string>,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEssenceData(
    profileId: PromiseOrValue<BigNumberish>,
    essenceId: PromiseOrValue<BigNumberish>,
    tokenURI: PromiseOrValue<string>,
    mw: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEssenceDataWithSig(
    profileId: PromiseOrValue<BigNumberish>,
    essenceId: PromiseOrValue<BigNumberish>,
    tokenURI: PromiseOrValue<string>,
    mw: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetadata(
    profileId: PromiseOrValue<BigNumberish>,
    metadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetadataWithSig(
    profileId: PromiseOrValue<BigNumberish>,
    metadata: PromiseOrValue<string>,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNFTDescriptor(
    descriptor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNamespaceOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperatorApproval(
    profileId: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrimaryProfile(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrimaryProfileWithSig(
    profileId: PromiseOrValue<BigNumberish>,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSubscribeData(
    profileId: PromiseOrValue<BigNumberish>,
    tokenURI: PromiseOrValue<string>,
    mw: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSubscribeDataWithSig(
    profileId: PromiseOrValue<BigNumberish>,
    tokenURI: PromiseOrValue<string>,
    mw: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    params: DataTypes.SubscribeParamsStruct,
    preDatas: PromiseOrValue<BytesLike>[],
    postDatas: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeWithSig(
    params: DataTypes.SubscribeParamsStruct,
    preDatas: PromiseOrValue<BytesLike>[],
    postDatas: PromiseOrValue<BytesLike>[],
    sender: PromiseOrValue<string>,
    sig: DataTypes.EIP712SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collect(
      params: DataTypes.CollectParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectWithSig(
      params: DataTypes.CollectParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProfile(
      params: DataTypes.CreateProfileParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvatar(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getEssenceMw(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getEssenceNFT(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getEssenceNFTTokenURI(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getHandleByProfileId(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMetadata(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNFTDescriptor(overrides?: CallOverrides): Promise<string>;

    getNamespaceOwner(overrides?: CallOverrides): Promise<string>;

    getOperatorApproval(
      profileId: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPrimaryProfile(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileIdByHandle(
      handle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscribeMw(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubscribeNFT(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubscribeNFTTokenURI(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _owner: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(
      toPause: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerEssence(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerEssenceWithSig(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAvatar(
      profileId: PromiseOrValue<BigNumberish>,
      avatar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvatarWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      avatar: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setEssenceData(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEssenceDataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadata(
      profileId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTDescriptor(
      descriptor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNamespaceOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperatorApproval(
      profileId: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrimaryProfile(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrimaryProfileWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubscribeData(
      profileId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubscribeDataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: PromiseOrValue<BytesLike>[],
      postDatas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    subscribeWithSig(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: PromiseOrValue<BytesLike>[],
      postDatas: PromiseOrValue<BytesLike>[],
      sender: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {
    "CollectEssence(address,uint256,uint256,uint256,bytes,bytes)"(
      collector?: PromiseOrValue<string> | null,
      profileId?: PromiseOrValue<BigNumberish> | null,
      essenceId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: null,
      preData?: null,
      postData?: null
    ): CollectEssenceEventFilter;
    CollectEssence(
      collector?: PromiseOrValue<string> | null,
      profileId?: PromiseOrValue<BigNumberish> | null,
      essenceId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: null,
      preData?: null,
      postData?: null
    ): CollectEssenceEventFilter;

    "CreateProfile(address,uint256,string,string,string)"(
      to?: PromiseOrValue<string> | null,
      profileId?: PromiseOrValue<BigNumberish> | null,
      handle?: null,
      avatar?: null,
      metadata?: null
    ): CreateProfileEventFilter;
    CreateProfile(
      to?: PromiseOrValue<string> | null,
      profileId?: PromiseOrValue<BigNumberish> | null,
      handle?: null,
      avatar?: null,
      metadata?: null
    ): CreateProfileEventFilter;

    "DeployEssenceNFT(uint256,uint256,address)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      essenceId?: PromiseOrValue<BigNumberish> | null,
      essenceNFT?: PromiseOrValue<string> | null
    ): DeployEssenceNFTEventFilter;
    DeployEssenceNFT(
      profileId?: PromiseOrValue<BigNumberish> | null,
      essenceId?: PromiseOrValue<BigNumberish> | null,
      essenceNFT?: PromiseOrValue<string> | null
    ): DeployEssenceNFTEventFilter;

    "DeploySubscribeNFT(uint256,address)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      subscribeNFT?: PromiseOrValue<string> | null
    ): DeploySubscribeNFTEventFilter;
    DeploySubscribeNFT(
      profileId?: PromiseOrValue<BigNumberish> | null,
      subscribeNFT?: PromiseOrValue<string> | null
    ): DeploySubscribeNFTEventFilter;

    "Initialize(address,string,string)"(
      owner?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null
    ): InitializeEventFilter;
    Initialize(
      owner?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null
    ): InitializeEventFilter;

    "RegisterEssence(uint256,uint256,string,string,string,address,bytes)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      essenceId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      symbol?: null,
      essenceTokenURI?: null,
      essenceMw?: null,
      prepareReturnData?: null
    ): RegisterEssenceEventFilter;
    RegisterEssence(
      profileId?: PromiseOrValue<BigNumberish> | null,
      essenceId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      symbol?: null,
      essenceTokenURI?: null,
      essenceMw?: null,
      prepareReturnData?: null
    ): RegisterEssenceEventFilter;

    "SetAvatar(uint256,string)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      newAvatar?: null
    ): SetAvatarEventFilter;
    SetAvatar(
      profileId?: PromiseOrValue<BigNumberish> | null,
      newAvatar?: null
    ): SetAvatarEventFilter;

    "SetEssenceData(uint256,uint256,string,address,bytes)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      essenceId?: PromiseOrValue<BigNumberish> | null,
      tokenURI?: null,
      mw?: null,
      prepareReturnData?: null
    ): SetEssenceDataEventFilter;
    SetEssenceData(
      profileId?: PromiseOrValue<BigNumberish> | null,
      essenceId?: PromiseOrValue<BigNumberish> | null,
      tokenURI?: null,
      mw?: null,
      prepareReturnData?: null
    ): SetEssenceDataEventFilter;

    "SetMetadata(uint256,string)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      newMetadata?: null
    ): SetMetadataEventFilter;
    SetMetadata(
      profileId?: PromiseOrValue<BigNumberish> | null,
      newMetadata?: null
    ): SetMetadataEventFilter;

    "SetNFTDescriptor(address)"(
      newDescriptor?: PromiseOrValue<string> | null
    ): SetNFTDescriptorEventFilter;
    SetNFTDescriptor(
      newDescriptor?: PromiseOrValue<string> | null
    ): SetNFTDescriptorEventFilter;

    "SetNamespaceOwner(address,address)"(
      preOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): SetNamespaceOwnerEventFilter;
    SetNamespaceOwner(
      preOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): SetNamespaceOwnerEventFilter;

    "SetOperatorApproval(uint256,address,bool,bool)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      operator?: PromiseOrValue<string> | null,
      prevApproved?: null,
      approved?: null
    ): SetOperatorApprovalEventFilter;
    SetOperatorApproval(
      profileId?: PromiseOrValue<BigNumberish> | null,
      operator?: PromiseOrValue<string> | null,
      prevApproved?: null,
      approved?: null
    ): SetOperatorApprovalEventFilter;

    "SetPrimaryProfile(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      profileId?: PromiseOrValue<BigNumberish> | null
    ): SetPrimaryProfileEventFilter;
    SetPrimaryProfile(
      user?: PromiseOrValue<string> | null,
      profileId?: PromiseOrValue<BigNumberish> | null
    ): SetPrimaryProfileEventFilter;

    "SetSubscribeData(uint256,string,address,bytes)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      tokenURI?: null,
      mw?: null,
      prepareReturnData?: null
    ): SetSubscribeDataEventFilter;
    SetSubscribeData(
      profileId?: PromiseOrValue<BigNumberish> | null,
      tokenURI?: null,
      mw?: null,
      prepareReturnData?: null
    ): SetSubscribeDataEventFilter;

    "Subscribe(address,uint256[],bytes[],bytes[])"(
      sender?: PromiseOrValue<string> | null,
      profileIds?: null,
      preDatas?: null,
      postDatas?: null
    ): SubscribeEventFilter;
    Subscribe(
      sender?: PromiseOrValue<string> | null,
      profileIds?: null,
      preDatas?: null,
      postDatas?: null
    ): SubscribeEventFilter;
  };

  estimateGas: {
    collect(
      params: DataTypes.CollectParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectWithSig(
      params: DataTypes.CollectParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createProfile(
      params: DataTypes.CreateProfileParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAvatar(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEssenceMw(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEssenceNFT(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEssenceNFTTokenURI(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHandleByProfileId(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadata(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTDescriptor(overrides?: CallOverrides): Promise<BigNumber>;

    getNamespaceOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getOperatorApproval(
      profileId: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryProfile(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileIdByHandle(
      handle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscribeMw(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscribeNFT(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscribeNFTTokenURI(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      toPause: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerEssence(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerEssenceWithSig(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAvatar(
      profileId: PromiseOrValue<BigNumberish>,
      avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAvatarWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      avatar: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEssenceData(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEssenceDataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetadata(
      profileId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetadataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNFTDescriptor(
      descriptor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNamespaceOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperatorApproval(
      profileId: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrimaryProfile(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrimaryProfileWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSubscribeData(
      profileId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSubscribeDataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribe(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: PromiseOrValue<BytesLike>[],
      postDatas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeWithSig(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: PromiseOrValue<BytesLike>[],
      postDatas: PromiseOrValue<BytesLike>[],
      sender: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collect(
      params: DataTypes.CollectParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectWithSig(
      params: DataTypes.CollectParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createProfile(
      params: DataTypes.CreateProfileParamsStruct,
      preData: PromiseOrValue<BytesLike>,
      postData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAvatar(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEssenceMw(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEssenceNFT(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEssenceNFTTokenURI(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHandleByProfileId(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadata(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTDescriptor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNamespaceOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOperatorApproval(
      profileId: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimaryProfile(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileIdByHandle(
      handle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscribeMw(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscribeNFT(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscribeNFTTokenURI(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      toPause: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerEssence(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerEssenceWithSig(
      params: DataTypes.RegisterEssenceParamsStruct,
      initData: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAvatar(
      profileId: PromiseOrValue<BigNumberish>,
      avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAvatarWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      avatar: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEssenceData(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEssenceDataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      essenceId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetadata(
      profileId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetadataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNFTDescriptor(
      descriptor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNamespaceOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperatorApproval(
      profileId: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrimaryProfile(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrimaryProfileWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSubscribeData(
      profileId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSubscribeDataWithSig(
      profileId: PromiseOrValue<BigNumberish>,
      tokenURI: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: PromiseOrValue<BytesLike>[],
      postDatas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeWithSig(
      params: DataTypes.SubscribeParamsStruct,
      preDatas: PromiseOrValue<BytesLike>[],
      postDatas: PromiseOrValue<BytesLike>[],
      sender: PromiseOrValue<string>,
      sig: DataTypes.EIP712SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
