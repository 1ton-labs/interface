/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace DataTypes {
  export type ComputedAddressesStruct = {
    profileProxy: PromiseOrValue<string>;
    profileFactory: PromiseOrValue<string>;
    subscribeFactory: PromiseOrValue<string>;
    essenceFactory: PromiseOrValue<string>;
  };

  export type ComputedAddressesStructOutput = [
    string,
    string,
    string,
    string
  ] & {
    profileProxy: string;
    profileFactory: string;
    subscribeFactory: string;
    essenceFactory: string;
  };

  export type CreateNamespaceParamsStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    addrs: DataTypes.ComputedAddressesStruct;
  };

  export type CreateNamespaceParamsStructOutput = [
    string,
    string,
    string,
    DataTypes.ComputedAddressesStructOutput
  ] & {
    name: string;
    symbol: string;
    owner: string;
    addrs: DataTypes.ComputedAddressesStructOutput;
  };
}

export interface ICyberEngineInterface extends utils.Interface {
  functions: {
    "allowEssenceMw(address,bool)": FunctionFragment;
    "allowProfileMw(address,bool)": FunctionFragment;
    "allowSubscribeMw(address,bool)": FunctionFragment;
    "createNamespace((string,string,address,(address,address,address,address)))": FunctionFragment;
    "getNameByNamespace(address)": FunctionFragment;
    "getProfileMwByNamespace(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isEssenceMwAllowed(address)": FunctionFragment;
    "isProfileMwAllowed(address)": FunctionFragment;
    "isSubscribeMwAllowed(address)": FunctionFragment;
    "setProfileMw(address,address,bytes)": FunctionFragment;
    "upgradeEssenceNFT(address,address)": FunctionFragment;
    "upgradeProfileNFT(address,address)": FunctionFragment;
    "upgradeSubscribeNFT(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowEssenceMw"
      | "allowProfileMw"
      | "allowSubscribeMw"
      | "createNamespace"
      | "getNameByNamespace"
      | "getProfileMwByNamespace"
      | "initialize"
      | "isEssenceMwAllowed"
      | "isProfileMwAllowed"
      | "isSubscribeMwAllowed"
      | "setProfileMw"
      | "upgradeEssenceNFT"
      | "upgradeProfileNFT"
      | "upgradeSubscribeNFT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowEssenceMw",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowProfileMw",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowSubscribeMw",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNamespace",
    values: [DataTypes.CreateNamespaceParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getNameByNamespace",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileMwByNamespace",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isEssenceMwAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isProfileMwAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscribeMwAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileMw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeEssenceNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProfileNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeSubscribeNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowEssenceMw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowProfileMw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowSubscribeMw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNamespace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNameByNamespace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileMwByNamespace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEssenceMwAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProfileMwAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscribeMwAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfileMw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeEssenceNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProfileNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeSubscribeNFT",
    data: BytesLike
  ): Result;

  events: {
    "AllowEssenceMw(address,bool,bool)": EventFragment;
    "AllowProfileMw(address,bool,bool)": EventFragment;
    "AllowSubscribeMw(address,bool,bool)": EventFragment;
    "CreateNamespace(address,string,string)": EventFragment;
    "Initialize(address,address)": EventFragment;
    "SetProfileMw(address,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowEssenceMw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowProfileMw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowSubscribeMw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateNamespace"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProfileMw"): EventFragment;
}

export interface AllowEssenceMwEventObject {
  mw: string;
  preAllowed: boolean;
  newAllowed: boolean;
}
export type AllowEssenceMwEvent = TypedEvent<
  [string, boolean, boolean],
  AllowEssenceMwEventObject
>;

export type AllowEssenceMwEventFilter = TypedEventFilter<AllowEssenceMwEvent>;

export interface AllowProfileMwEventObject {
  mw: string;
  preAllowed: boolean;
  newAllowed: boolean;
}
export type AllowProfileMwEvent = TypedEvent<
  [string, boolean, boolean],
  AllowProfileMwEventObject
>;

export type AllowProfileMwEventFilter = TypedEventFilter<AllowProfileMwEvent>;

export interface AllowSubscribeMwEventObject {
  mw: string;
  preAllowed: boolean;
  newAllowed: boolean;
}
export type AllowSubscribeMwEvent = TypedEvent<
  [string, boolean, boolean],
  AllowSubscribeMwEventObject
>;

export type AllowSubscribeMwEventFilter =
  TypedEventFilter<AllowSubscribeMwEvent>;

export interface CreateNamespaceEventObject {
  namespace: string;
  name: string;
  symbol: string;
}
export type CreateNamespaceEvent = TypedEvent<
  [string, string, string],
  CreateNamespaceEventObject
>;

export type CreateNamespaceEventFilter = TypedEventFilter<CreateNamespaceEvent>;

export interface InitializeEventObject {
  owner: string;
  rolesAuthority: string;
}
export type InitializeEvent = TypedEvent<
  [string, string],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface SetProfileMwEventObject {
  namespace: string;
  mw: string;
  returnData: string;
}
export type SetProfileMwEvent = TypedEvent<
  [string, string, string],
  SetProfileMwEventObject
>;

export type SetProfileMwEventFilter = TypedEventFilter<SetProfileMwEvent>;

export interface ICyberEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICyberEngineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowEssenceMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowProfileMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowSubscribeMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNamespace(
      params: DataTypes.CreateNamespaceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNameByNamespace(
      namespace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProfileMwByNamespace(
      namespace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _rolesAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isEssenceMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isProfileMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSubscribeMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setProfileMw(
      namespace: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeEssenceNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeProfileNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeSubscribeNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowEssenceMw(
    mw: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowProfileMw(
    mw: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowSubscribeMw(
    mw: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNamespace(
    params: DataTypes.CreateNamespaceParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNameByNamespace(
    namespace: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProfileMwByNamespace(
    namespace: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _owner: PromiseOrValue<string>,
    _rolesAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isEssenceMwAllowed(
    mw: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProfileMwAllowed(
    mw: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSubscribeMwAllowed(
    mw: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setProfileMw(
    namespace: PromiseOrValue<string>,
    mw: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeEssenceNFT(
    newImpl: PromiseOrValue<string>,
    namespace: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeProfileNFT(
    newImpl: PromiseOrValue<string>,
    namespace: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeSubscribeNFT(
    newImpl: PromiseOrValue<string>,
    namespace: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowEssenceMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowProfileMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowSubscribeMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNamespace(
      params: DataTypes.CreateNamespaceParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        profileProxy: string;
        subBeacon: string;
        essBeacon: string;
      }
    >;

    getNameByNamespace(
      namespace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProfileMwByNamespace(
      namespace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _owner: PromiseOrValue<string>,
      _rolesAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isEssenceMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProfileMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSubscribeMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setProfileMw(
      namespace: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeEssenceNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeProfileNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeSubscribeNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllowEssenceMw(address,bool,bool)"(
      mw?: PromiseOrValue<string> | null,
      preAllowed?: PromiseOrValue<boolean> | null,
      newAllowed?: PromiseOrValue<boolean> | null
    ): AllowEssenceMwEventFilter;
    AllowEssenceMw(
      mw?: PromiseOrValue<string> | null,
      preAllowed?: PromiseOrValue<boolean> | null,
      newAllowed?: PromiseOrValue<boolean> | null
    ): AllowEssenceMwEventFilter;

    "AllowProfileMw(address,bool,bool)"(
      mw?: PromiseOrValue<string> | null,
      preAllowed?: PromiseOrValue<boolean> | null,
      newAllowed?: PromiseOrValue<boolean> | null
    ): AllowProfileMwEventFilter;
    AllowProfileMw(
      mw?: PromiseOrValue<string> | null,
      preAllowed?: PromiseOrValue<boolean> | null,
      newAllowed?: PromiseOrValue<boolean> | null
    ): AllowProfileMwEventFilter;

    "AllowSubscribeMw(address,bool,bool)"(
      mw?: PromiseOrValue<string> | null,
      preAllowed?: PromiseOrValue<boolean> | null,
      newAllowed?: PromiseOrValue<boolean> | null
    ): AllowSubscribeMwEventFilter;
    AllowSubscribeMw(
      mw?: PromiseOrValue<string> | null,
      preAllowed?: PromiseOrValue<boolean> | null,
      newAllowed?: PromiseOrValue<boolean> | null
    ): AllowSubscribeMwEventFilter;

    "CreateNamespace(address,string,string)"(
      namespace?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null
    ): CreateNamespaceEventFilter;
    CreateNamespace(
      namespace?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null
    ): CreateNamespaceEventFilter;

    "Initialize(address,address)"(
      owner?: PromiseOrValue<string> | null,
      rolesAuthority?: PromiseOrValue<string> | null
    ): InitializeEventFilter;
    Initialize(
      owner?: PromiseOrValue<string> | null,
      rolesAuthority?: PromiseOrValue<string> | null
    ): InitializeEventFilter;

    "SetProfileMw(address,address,bytes)"(
      namespace?: PromiseOrValue<string> | null,
      mw?: null,
      returnData?: null
    ): SetProfileMwEventFilter;
    SetProfileMw(
      namespace?: PromiseOrValue<string> | null,
      mw?: null,
      returnData?: null
    ): SetProfileMwEventFilter;
  };

  estimateGas: {
    allowEssenceMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowProfileMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowSubscribeMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNamespace(
      params: DataTypes.CreateNamespaceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNameByNamespace(
      namespace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileMwByNamespace(
      namespace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _rolesAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isEssenceMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProfileMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSubscribeMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setProfileMw(
      namespace: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeEssenceNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeProfileNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeSubscribeNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowEssenceMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowProfileMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowSubscribeMw(
      mw: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNamespace(
      params: DataTypes.CreateNamespaceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNameByNamespace(
      namespace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileMwByNamespace(
      namespace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _rolesAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isEssenceMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProfileMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSubscribeMwAllowed(
      mw: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setProfileMw(
      namespace: PromiseOrValue<string>,
      mw: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeEssenceNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeProfileNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeSubscribeNFT(
      newImpl: PromiseOrValue<string>,
      namespace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
