/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ITreasuryEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AllowCurrency(address,bool,bool)": EventFragment;
    "SetTreasuryAddress(address,address)": EventFragment;
    "SetTreasuryFee(uint16,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowCurrency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasuryAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasuryFee"): EventFragment;
}

export interface AllowCurrencyEventObject {
  currency: string;
  preAllowed: boolean;
  newAllowed: boolean;
}
export type AllowCurrencyEvent = TypedEvent<
  [string, boolean, boolean],
  AllowCurrencyEventObject
>;

export type AllowCurrencyEventFilter = TypedEventFilter<AllowCurrencyEvent>;

export interface SetTreasuryAddressEventObject {
  preTreasuryAddress: string;
  treasuryAddress: string;
}
export type SetTreasuryAddressEvent = TypedEvent<
  [string, string],
  SetTreasuryAddressEventObject
>;

export type SetTreasuryAddressEventFilter =
  TypedEventFilter<SetTreasuryAddressEvent>;

export interface SetTreasuryFeeEventObject {
  preTreasuryFee: number;
  treasuryFee: number;
}
export type SetTreasuryFeeEvent = TypedEvent<
  [number, number],
  SetTreasuryFeeEventObject
>;

export type SetTreasuryFeeEventFilter = TypedEventFilter<SetTreasuryFeeEvent>;

export interface ITreasuryEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITreasuryEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AllowCurrency(address,bool,bool)"(
      currency?: PromiseOrValue<string> | null,
      preAllowed?: PromiseOrValue<boolean> | null,
      newAllowed?: PromiseOrValue<boolean> | null
    ): AllowCurrencyEventFilter;
    AllowCurrency(
      currency?: PromiseOrValue<string> | null,
      preAllowed?: PromiseOrValue<boolean> | null,
      newAllowed?: PromiseOrValue<boolean> | null
    ): AllowCurrencyEventFilter;

    "SetTreasuryAddress(address,address)"(
      preTreasuryAddress?: PromiseOrValue<string> | null,
      treasuryAddress?: PromiseOrValue<string> | null
    ): SetTreasuryAddressEventFilter;
    SetTreasuryAddress(
      preTreasuryAddress?: PromiseOrValue<string> | null,
      treasuryAddress?: PromiseOrValue<string> | null
    ): SetTreasuryAddressEventFilter;

    "SetTreasuryFee(uint16,uint16)"(
      preTreasuryFee?: PromiseOrValue<BigNumberish> | null,
      treasuryFee?: PromiseOrValue<BigNumberish> | null
    ): SetTreasuryFeeEventFilter;
    SetTreasuryFee(
      preTreasuryFee?: PromiseOrValue<BigNumberish> | null,
      treasuryFee?: PromiseOrValue<BigNumberish> | null
    ): SetTreasuryFeeEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
