/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface NFTfiSigningUtilsInterface extends utils.Interface {
  functions: {
    "getChainID()": FunctionFragment;
    "isValidBorrowerSignature(uint256,uint256,address,address,bytes)": FunctionFragment;
    "isValidLenderSignature(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getChainID"
      | "isValidBorrowerSignature"
      | "isValidLenderSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getChainID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidBorrowerSignature",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidLenderSignature",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getChainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidBorrowerSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidLenderSignature",
    data: BytesLike
  ): Result;

  events: {};
}

export interface NFTfiSigningUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTfiSigningUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getChainID(overrides?: CallOverrides): Promise<[BigNumber]>;

    isValidBorrowerSignature(
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _borrowerNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidLenderSignature(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _lenderNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _interestIsProRated: PromiseOrValue<boolean>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getChainID(overrides?: CallOverrides): Promise<BigNumber>;

  isValidBorrowerSignature(
    _nftCollateralId: PromiseOrValue<BigNumberish>,
    _borrowerNonce: PromiseOrValue<BigNumberish>,
    _nftCollateralContract: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _borrowerSignature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidLenderSignature(
    _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
    _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
    _nftCollateralId: PromiseOrValue<BigNumberish>,
    _loanDuration: PromiseOrValue<BigNumberish>,
    _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
    _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
    _lenderNonce: PromiseOrValue<BigNumberish>,
    _nftCollateralContract: PromiseOrValue<string>,
    _loanERC20Denomination: PromiseOrValue<string>,
    _lender: PromiseOrValue<string>,
    _interestIsProRated: PromiseOrValue<boolean>,
    _lenderSignature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getChainID(overrides?: CallOverrides): Promise<BigNumber>;

    isValidBorrowerSignature(
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _borrowerNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidLenderSignature(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _lenderNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _interestIsProRated: PromiseOrValue<boolean>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getChainID(overrides?: CallOverrides): Promise<BigNumber>;

    isValidBorrowerSignature(
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _borrowerNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidLenderSignature(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _lenderNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _interestIsProRated: PromiseOrValue<boolean>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidBorrowerSignature(
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _borrowerNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidLenderSignature(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _lenderNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _interestIsProRated: PromiseOrValue<boolean>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
