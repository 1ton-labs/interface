/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace INFTfi {
  export type LoanStruct = {
    loanId: PromiseOrValue<BigNumberish>;
    loanPrincipalAmount: PromiseOrValue<BigNumberish>;
    maximumRepaymentAmount: PromiseOrValue<BigNumberish>;
    nftCollateralId: PromiseOrValue<BigNumberish>;
    loanStartTime: PromiseOrValue<BigNumberish>;
    loanDuration: PromiseOrValue<BigNumberish>;
    loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>;
    loanAdminFeeInBasisPoints: PromiseOrValue<BigNumberish>;
    nftCollateralContract: PromiseOrValue<string>;
    loanERC20Denomination: PromiseOrValue<string>;
    borrower: PromiseOrValue<string>;
    interestIsProRated: PromiseOrValue<boolean>;
  };

  export type LoanStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    string,
    string,
    string,
    boolean
  ] & {
    loanId: BigNumber;
    loanPrincipalAmount: BigNumber;
    maximumRepaymentAmount: BigNumber;
    nftCollateralId: BigNumber;
    loanStartTime: BigNumber;
    loanDuration: number;
    loanInterestRateForDurationInBasisPoints: number;
    loanAdminFeeInBasisPoints: number;
    nftCollateralContract: string;
    loanERC20Denomination: string;
    borrower: string;
    interestIsProRated: boolean;
  };
}

export interface INFTfiInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "beginLoan(uint256,uint256,uint256,uint256,uint256,uint256,uint256[2],address,address,address,bytes,bytes)": FunctionFragment;
    "cancelLoanCommitmentBeforeLoanHasBegun(uint256)": FunctionFragment;
    "erc20CurrencyIsWhitelisted(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getChainID()": FunctionFragment;
    "getPayoffAmount(uint256)": FunctionFragment;
    "getWhetherNonceHasBeenUsedForUser(address,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "isValidBorrowerSignature(uint256,uint256,address,address,bytes)": FunctionFragment;
    "isValidLenderSignature(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,bool,bytes)": FunctionFragment;
    "liquidateOverdueLoan(uint256)": FunctionFragment;
    "loanIdToLoan(uint256)": FunctionFragment;
    "loanRepaidOrLiquidated(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nftContractIsWhitelisted(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "payBackLoan(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership()": FunctionFragment;
    "updateAdminFee(uint256)": FunctionFragment;
    "updateMaximumLoanDuration(uint256)": FunctionFragment;
    "updateMaximumNumberOfActiveLoans(uint256)": FunctionFragment;
    "whitelistERC20Currency(address,bool)": FunctionFragment;
    "whitelistNFTContract(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "balanceOf"
      | "beginLoan"
      | "cancelLoanCommitmentBeforeLoanHasBegun"
      | "erc20CurrencyIsWhitelisted"
      | "getApproved"
      | "getChainID"
      | "getPayoffAmount"
      | "getWhetherNonceHasBeenUsedForUser"
      | "isApprovedForAll"
      | "isOwner"
      | "isValidBorrowerSignature"
      | "isValidLenderSignature"
      | "liquidateOverdueLoan"
      | "loanIdToLoan"
      | "loanRepaidOrLiquidated"
      | "name"
      | "nftContractIsWhitelisted"
      | "owner"
      | "ownerOf"
      | "payBackLoan"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "transferFrom"
      | "transferOwnership"
      | "updateAdminFee"
      | "updateMaximumLoanDuration"
      | "updateMaximumNumberOfActiveLoans"
      | "whitelistERC20Currency"
      | "whitelistNFTContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "beginLoan",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLoanCommitmentBeforeLoanHasBegun",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20CurrencyIsWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoffAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhetherNonceHasBeenUsedForUser",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidBorrowerSignature",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidLenderSignature",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateOverdueLoan",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "loanIdToLoan",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "loanRepaidOrLiquidated",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftContractIsWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payBackLoan",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdminFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaximumLoanDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaximumNumberOfActiveLoans",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistERC20Currency",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistNFTContract",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beginLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelLoanCommitmentBeforeLoanHasBegun",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20CurrencyIsWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPayoffAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhetherNonceHasBeenUsedForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidBorrowerSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidLenderSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateOverdueLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanIdToLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanRepaidOrLiquidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContractIsWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payBackLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdminFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaximumLoanDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaximumNumberOfActiveLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistERC20Currency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistNFTContract",
    data: BytesLike
  ): Result;

  events: {
    "AdminFeeUpdated(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "LoanLiquidated(uint256,address,address,uint256,uint256,uint256,uint256,address)": EventFragment;
    "LoanRepaid(uint256,address,address,uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "LoanStarted(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanRepaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AdminFeeUpdatedEventObject {
  newAdminFee: BigNumber;
}
export type AdminFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  AdminFeeUpdatedEventObject
>;

export type AdminFeeUpdatedEventFilter = TypedEventFilter<AdminFeeUpdatedEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface LoanLiquidatedEventObject {
  loanId: BigNumber;
  borrower: string;
  lender: string;
  loanPrincipalAmount: BigNumber;
  nftCollateralId: BigNumber;
  loanMaturityDate: BigNumber;
  loanLiquidationDate: BigNumber;
  nftCollateralContract: string;
}
export type LoanLiquidatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  LoanLiquidatedEventObject
>;

export type LoanLiquidatedEventFilter = TypedEventFilter<LoanLiquidatedEvent>;

export interface LoanRepaidEventObject {
  loanId: BigNumber;
  borrower: string;
  lender: string;
  loanPrincipalAmount: BigNumber;
  nftCollateralId: BigNumber;
  amountPaidToLender: BigNumber;
  adminFee: BigNumber;
  nftCollateralContract: string;
  loanERC20Denomination: string;
}
export type LoanRepaidEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  LoanRepaidEventObject
>;

export type LoanRepaidEventFilter = TypedEventFilter<LoanRepaidEvent>;

export interface LoanStartedEventObject {
  loanId: BigNumber;
  borrower: string;
  lender: string;
  loanPrincipalAmount: BigNumber;
  maximumRepaymentAmount: BigNumber;
  nftCollateralId: BigNumber;
  loanStartTime: BigNumber;
  loanDuration: BigNumber;
  loanInterestRateForDurationInBasisPoints: BigNumber;
  nftCollateralContract: string;
  loanERC20Denomination: string;
  interestIsProRated: boolean;
}
export type LoanStartedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean
  ],
  LoanStartedEventObject
>;

export type LoanStartedEventFilter = TypedEventFilter<LoanStartedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface INFTfi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INFTfiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    beginLoan(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _borrowerAndLenderNonces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelLoanCommitmentBeforeLoanHasBegun(
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20CurrencyIsWhitelisted(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { operator: string }>;

    getChainID(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPayoffAmount(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWhetherNonceHasBeenUsedForUser(
      _user: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    isValidBorrowerSignature(
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _borrowerNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidLenderSignature(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _lenderNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _interestIsProRated: PromiseOrValue<boolean>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidateOverdueLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loanIdToLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[INFTfi.LoanStructOutput]>;

    loanRepaidOrLiquidated(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftContractIsWhitelisted(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    payBackLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdminFee(
      _newAdminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMaximumLoanDuration(
      _newMaximumLoanDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMaximumNumberOfActiveLoans(
      _newMaximumNumberOfActiveLoans: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistERC20Currency(
      _erc20Currency: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistNFTContract(
      _nftContract: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beginLoan(
    _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
    _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
    _nftCollateralId: PromiseOrValue<BigNumberish>,
    _loanDuration: PromiseOrValue<BigNumberish>,
    _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
    _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
    _borrowerAndLenderNonces: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _nftCollateralContract: PromiseOrValue<string>,
    _loanERC20Denomination: PromiseOrValue<string>,
    _lender: PromiseOrValue<string>,
    _borrowerSignature: PromiseOrValue<BytesLike>,
    _lenderSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelLoanCommitmentBeforeLoanHasBegun(
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20CurrencyIsWhitelisted(
    erc20: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainID(overrides?: CallOverrides): Promise<BigNumber>;

  getPayoffAmount(
    _loanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWhetherNonceHasBeenUsedForUser(
    _user: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  isValidBorrowerSignature(
    _nftCollateralId: PromiseOrValue<BigNumberish>,
    _borrowerNonce: PromiseOrValue<BigNumberish>,
    _nftCollateralContract: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _borrowerSignature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidLenderSignature(
    _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
    _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
    _nftCollateralId: PromiseOrValue<BigNumberish>,
    _loanDuration: PromiseOrValue<BigNumberish>,
    _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
    _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
    _lenderNonce: PromiseOrValue<BigNumberish>,
    _nftCollateralContract: PromiseOrValue<string>,
    _loanERC20Denomination: PromiseOrValue<string>,
    _lender: PromiseOrValue<string>,
    _interestIsProRated: PromiseOrValue<boolean>,
    _lenderSignature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidateOverdueLoan(
    _loanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loanIdToLoan(
    _loanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<INFTfi.LoanStructOutput>;

  loanRepaidOrLiquidated(
    _loanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  nftContractIsWhitelisted(
    nft: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  payBackLoan(
    _loanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdminFee(
    _newAdminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMaximumLoanDuration(
    _newMaximumLoanDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMaximumNumberOfActiveLoans(
    _newMaximumNumberOfActiveLoans: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistERC20Currency(
    _erc20Currency: PromiseOrValue<string>,
    _setAsWhitelisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistNFTContract(
    _nftContract: PromiseOrValue<string>,
    _setAsWhitelisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginLoan(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _borrowerAndLenderNonces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelLoanCommitmentBeforeLoanHasBegun(
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20CurrencyIsWhitelisted(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainID(overrides?: CallOverrides): Promise<BigNumber>;

    getPayoffAmount(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhetherNonceHasBeenUsedForUser(
      _user: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    isValidBorrowerSignature(
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _borrowerNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidLenderSignature(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _lenderNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _interestIsProRated: PromiseOrValue<boolean>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidateOverdueLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    loanIdToLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<INFTfi.LoanStructOutput>;

    loanRepaidOrLiquidated(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nftContractIsWhitelisted(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    payBackLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(overrides?: CallOverrides): Promise<void>;

    updateAdminFee(
      _newAdminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaximumLoanDuration(
      _newMaximumLoanDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaximumNumberOfActiveLoans(
      _newMaximumNumberOfActiveLoans: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistERC20Currency(
      _erc20Currency: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistNFTContract(
      _nftContract: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminFeeUpdated(uint256)"(newAdminFee?: null): AdminFeeUpdatedEventFilter;
    AdminFeeUpdated(newAdminFee?: null): AdminFeeUpdatedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "LoanLiquidated(uint256,address,address,uint256,uint256,uint256,uint256,address)"(
      loanId?: null,
      borrower?: null,
      lender?: null,
      loanPrincipalAmount?: null,
      nftCollateralId?: null,
      loanMaturityDate?: null,
      loanLiquidationDate?: null,
      nftCollateralContract?: null
    ): LoanLiquidatedEventFilter;
    LoanLiquidated(
      loanId?: null,
      borrower?: null,
      lender?: null,
      loanPrincipalAmount?: null,
      nftCollateralId?: null,
      loanMaturityDate?: null,
      loanLiquidationDate?: null,
      nftCollateralContract?: null
    ): LoanLiquidatedEventFilter;

    "LoanRepaid(uint256,address,address,uint256,uint256,uint256,uint256,address,address)"(
      loanId?: null,
      borrower?: null,
      lender?: null,
      loanPrincipalAmount?: null,
      nftCollateralId?: null,
      amountPaidToLender?: null,
      adminFee?: null,
      nftCollateralContract?: null,
      loanERC20Denomination?: null
    ): LoanRepaidEventFilter;
    LoanRepaid(
      loanId?: null,
      borrower?: null,
      lender?: null,
      loanPrincipalAmount?: null,
      nftCollateralId?: null,
      amountPaidToLender?: null,
      adminFee?: null,
      nftCollateralContract?: null,
      loanERC20Denomination?: null
    ): LoanRepaidEventFilter;

    "LoanStarted(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bool)"(
      loanId?: null,
      borrower?: null,
      lender?: null,
      loanPrincipalAmount?: null,
      maximumRepaymentAmount?: null,
      nftCollateralId?: null,
      loanStartTime?: null,
      loanDuration?: null,
      loanInterestRateForDurationInBasisPoints?: null,
      nftCollateralContract?: null,
      loanERC20Denomination?: null,
      interestIsProRated?: null
    ): LoanStartedEventFilter;
    LoanStarted(
      loanId?: null,
      borrower?: null,
      lender?: null,
      loanPrincipalAmount?: null,
      maximumRepaymentAmount?: null,
      nftCollateralId?: null,
      loanStartTime?: null,
      loanDuration?: null,
      loanInterestRateForDurationInBasisPoints?: null,
      nftCollateralContract?: null,
      loanERC20Denomination?: null,
      interestIsProRated?: null
    ): LoanStartedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginLoan(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _borrowerAndLenderNonces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelLoanCommitmentBeforeLoanHasBegun(
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20CurrencyIsWhitelisted(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainID(overrides?: CallOverrides): Promise<BigNumber>;

    getPayoffAmount(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhetherNonceHasBeenUsedForUser(
      _user: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    isValidBorrowerSignature(
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _borrowerNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidLenderSignature(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _lenderNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _interestIsProRated: PromiseOrValue<boolean>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateOverdueLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loanIdToLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanRepaidOrLiquidated(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftContractIsWhitelisted(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payBackLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdminFee(
      _newAdminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMaximumLoanDuration(
      _newMaximumLoanDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMaximumNumberOfActiveLoans(
      _newMaximumNumberOfActiveLoans: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistERC20Currency(
      _erc20Currency: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistNFTContract(
      _nftContract: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beginLoan(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _borrowerAndLenderNonces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelLoanCommitmentBeforeLoanHasBegun(
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20CurrencyIsWhitelisted(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayoffAmount(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhetherNonceHasBeenUsedForUser(
      _user: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidBorrowerSignature(
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _borrowerNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _borrowerSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidLenderSignature(
      _loanPrincipalAmount: PromiseOrValue<BigNumberish>,
      _maximumRepaymentAmount: PromiseOrValue<BigNumberish>,
      _nftCollateralId: PromiseOrValue<BigNumberish>,
      _loanDuration: PromiseOrValue<BigNumberish>,
      _loanInterestRateForDurationInBasisPoints: PromiseOrValue<BigNumberish>,
      _adminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      _lenderNonce: PromiseOrValue<BigNumberish>,
      _nftCollateralContract: PromiseOrValue<string>,
      _loanERC20Denomination: PromiseOrValue<string>,
      _lender: PromiseOrValue<string>,
      _interestIsProRated: PromiseOrValue<boolean>,
      _lenderSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateOverdueLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loanIdToLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanRepaidOrLiquidated(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftContractIsWhitelisted(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payBackLoan(
      _loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdminFee(
      _newAdminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMaximumLoanDuration(
      _newMaximumLoanDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMaximumNumberOfActiveLoans(
      _newMaximumNumberOfActiveLoans: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistERC20Currency(
      _erc20Currency: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistNFTContract(
      _nftContract: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
