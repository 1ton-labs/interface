/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface INFTfiAdminInterface extends utils.Interface {
  functions: {
    "erc20CurrencyIsWhitelisted(address)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "name()": FunctionFragment;
    "nftContractIsWhitelisted(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "symbol()": FunctionFragment;
    "transferOwnership()": FunctionFragment;
    "updateAdminFee(uint256)": FunctionFragment;
    "updateMaximumLoanDuration(uint256)": FunctionFragment;
    "updateMaximumNumberOfActiveLoans(uint256)": FunctionFragment;
    "whitelistERC20Currency(address,bool)": FunctionFragment;
    "whitelistNFTContract(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "erc20CurrencyIsWhitelisted"
      | "isOwner"
      | "name"
      | "nftContractIsWhitelisted"
      | "owner"
      | "symbol"
      | "transferOwnership"
      | "updateAdminFee"
      | "updateMaximumLoanDuration"
      | "updateMaximumNumberOfActiveLoans"
      | "whitelistERC20Currency"
      | "whitelistNFTContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "erc20CurrencyIsWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftContractIsWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdminFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaximumLoanDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaximumNumberOfActiveLoans",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistERC20Currency",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistNFTContract",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "erc20CurrencyIsWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContractIsWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdminFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaximumLoanDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaximumNumberOfActiveLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistERC20Currency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistNFTContract",
    data: BytesLike
  ): Result;

  events: {
    "AdminFeeUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminFeeUpdated"): EventFragment;
}

export interface AdminFeeUpdatedEventObject {
  newAdminFee: BigNumber;
}
export type AdminFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  AdminFeeUpdatedEventObject
>;

export type AdminFeeUpdatedEventFilter = TypedEventFilter<AdminFeeUpdatedEvent>;

export interface INFTfiAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INFTfiAdminInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    erc20CurrencyIsWhitelisted(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftContractIsWhitelisted(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdminFee(
      _newAdminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMaximumLoanDuration(
      _newMaximumLoanDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMaximumNumberOfActiveLoans(
      _newMaximumNumberOfActiveLoans: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistERC20Currency(
      _erc20Currency: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistNFTContract(
      _nftContract: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  erc20CurrencyIsWhitelisted(
    erc20: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  nftContractIsWhitelisted(
    nft: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdminFee(
    _newAdminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMaximumLoanDuration(
    _newMaximumLoanDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMaximumNumberOfActiveLoans(
    _newMaximumNumberOfActiveLoans: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistERC20Currency(
    _erc20Currency: PromiseOrValue<string>,
    _setAsWhitelisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistNFTContract(
    _nftContract: PromiseOrValue<string>,
    _setAsWhitelisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    erc20CurrencyIsWhitelisted(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nftContractIsWhitelisted(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transferOwnership(overrides?: CallOverrides): Promise<void>;

    updateAdminFee(
      _newAdminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaximumLoanDuration(
      _newMaximumLoanDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaximumNumberOfActiveLoans(
      _newMaximumNumberOfActiveLoans: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistERC20Currency(
      _erc20Currency: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistNFTContract(
      _nftContract: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminFeeUpdated(uint256)"(newAdminFee?: null): AdminFeeUpdatedEventFilter;
    AdminFeeUpdated(newAdminFee?: null): AdminFeeUpdatedEventFilter;
  };

  estimateGas: {
    erc20CurrencyIsWhitelisted(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftContractIsWhitelisted(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdminFee(
      _newAdminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMaximumLoanDuration(
      _newMaximumLoanDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMaximumNumberOfActiveLoans(
      _newMaximumNumberOfActiveLoans: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistERC20Currency(
      _erc20Currency: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistNFTContract(
      _nftContract: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    erc20CurrencyIsWhitelisted(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftContractIsWhitelisted(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdminFee(
      _newAdminFeeInBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMaximumLoanDuration(
      _newMaximumLoanDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMaximumNumberOfActiveLoans(
      _newMaximumNumberOfActiveLoans: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistERC20Currency(
      _erc20Currency: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistNFTContract(
      _nftContract: PromiseOrValue<string>,
      _setAsWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
